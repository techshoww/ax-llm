#include "runner/utils/mrope.hpp"
#include <iostream>
#include <vector>

// 打印三维位置ID函数
void print_position_ids(const std::vector<std::vector<int>>& position_ids) {
    // 遍历三个维度（temporal, height, width）
    for (int dim = 0; dim < 3; ++dim) {
        std::cout << "=== Dimension " << dim << " ==="<< position_ids[dim].size() << std::endl;
        
        // 遍历每个batch
        // for (size_t batch_idx = 0; batch_idx < position_ids[dim].size(); ++batch_idx) {
        //     std::cout << "Batch " << batch_idx << ": ";
            
            // 遍历序列中的每个token
            for (int val : position_ids[dim]) {
                std::cout << val << " ";
            }
            std::cout << std::endl;
        // }
    }
}


int main(int argc, char *argv[]){
    
    Config config;
    config.vision_config.spatial_merge_size = 2;
    config.image_token_id = 151655;
    config.video_token_id = 151656;
    config.vision_start_token_id = 151652;
    config.vision_config.tokens_per_second = 2;

    const std::vector<std::vector<int>> POSITION_IDS={{
        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
        27, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37
    },
    
        {0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,
        16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
        20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25,
        25, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
        25, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16,
        16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17,
        17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19,
        19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20,
        20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
        22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
        23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
        25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 15, 15, 15, 15, 15, 15,
        15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18,
        18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
        19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
        22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24,
        24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25,
        25, 25, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37},

        {0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21,
        22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21,
        22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37}

};

    std::vector<int> input_ids = {
        
        151644,   8948,    198,   2610,    525,    264,  10950,  17847,     13,
         151645,    198, 151644,    872,    198, 151652, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656, 151656,
         151656, 151656, 151656, 151656, 151653,  53481,  99487,  87140,     13,
         151645,    198, 151644,  77091,    198
    
    };

    std::vector<std::vector<int>> image_grid_thw;
    std::vector<std::vector<int>> video_grid_thw = {{4, 22, 22}};
    std::vector<double> second_per_grid_ts = {2};
  

    auto position_ids = get_rope_index(config, input_ids, image_grid_thw, video_grid_thw, second_per_grid_ts);

    print_position_ids(position_ids);

    for(int i=0;i<POSITION_IDS.size();i++){
        for(int j=0; j<POSITION_IDS[i].size();j++){
            if(POSITION_IDS[i][j]!=position_ids[i][j]){
                std::cout<<"check failed"<<std::endl;
                break;
            }
        }
    }

    std::cout<<"check success"<<std::endl;
}